Rust re-implementation:

- Async backbone: https://github.com/tokio-rs/tokio

- JSON Serlialisation: Sent in real-time, include meta data in long form
- Line Protocol Serlialisation: Batched to time (5 min a param), sorted tags, second precision, gzip compression
- Internal Serlialisation: Line protocol configuration validated meta-data, timestamp bounded on demand allocated per value,
  grow on demand (Vec baseline set at plugin level, growth a param), but reused by clearing when batch flushed,
  reserve after flushing if 4x bigger https://markusjais.com/unterstanding-rusts-vec-and-its-capacity-for-fast-and-efficient-programs/

- Meta-data management: what fields? Drive HA/Influx/Grafana/UI
- Data transformation:
- Data agregations:
- Data repeats:
- Model scoring:

- MQTT Client: https://github.com/fluffysquirrels/mqtt-async-client-rs
- HTTP Client: https://github.com/seanmonstar/reqwest
- Drive Client:
- Kafka Client: https://github.com/fede1024/rust-rdkafka

- HTTP Server: https://github.com/seanmonstar/warp
- WebSocket Server: https://github.com/seanmonstar/warp

- HTML Interface: show buffer size/usage, update time, last value, max/min

- Monkey/Gorilla/Mock Patch Clients: Configuration driven interfaces

