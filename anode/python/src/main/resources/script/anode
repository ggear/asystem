#!/bin/sh
### BEGIN INIT INFO
# Provides:          anode
# Required-Start:    $local_fs $remote_fs $network $syslog $named $weewx
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: ASystem ANode server
# Description:       Start the ASystem ANode server
#  This script will start the anode server.
### END INIT INFO

PATH=/usr/sbin:/usr/bin:/sbin:/bin

ANODE_ENV_FILE=${ANODE_ENV_FILE:-"/etc/profile"}

if [ -f ${ANODE_ENV_FILE} ]; then
  $(grep "export AWS" ${ANODE_ENV_FILE})
  $(grep "export MQTT" ${ANODE_ENV_FILE})
  $(grep "export NETATMO" ${ANODE_ENV_FILE})
  $(grep "export PYTHON2" ${ANODE_ENV_FILE})
fi

ANODE_TIMEOUT_SEC=30
ANODE_LOCK=/var/lock/subsys/anode
ANODE_OPTS=${ANODE_OPTS:-"--quiet"}
ANODE_LOG_FILE=${ANODE_LOG_FILE:-"/var/log/anode.log"}
ANODE_PATH=${ANODE_PATH:-"$PYTHON2_HOME/bin/anode"}

log_head() {
  echo -n "$1"
}

log_tail_success() {
  echo "$1"
}

log_tail_failure() {
  echo "$1"
}

start() {
  log_head "Starting anode: "
  if [ ! -f ${ANODE_LOCK} ]; then
    if [ -z ${ANODE_PATH} ]; then
      log_tail_failure "could not locate anode binary"
    else
      mkdir -p $(dirname ${ANODE_PATH}) $(dirname ${ANODE_LOG_FILE})
      nohup ${ANODE_PATH} ${ANODE_OPTS} > ${ANODE_LOG_FILE} 2>&1 &
      if [ $? -eq 0 ]; then
        echo $! > ${ANODE_LOCK}
        log_tail_success "anode started"
      else
        log_tail_failure "anode failed to start"
      fi
    fi
  else
    log_tail_failure "anode already started"
  fi
}

stop() {
  log_head "Stopping anode: "
  if [ -f ${ANODE_LOCK} ]; then
    kill $(cat ${ANODE_LOCK}) 2> /dev/null
    kill_success=$?
    rm -f ${ANODE_LOCK} 2> /dev/null
    timeout_counter=0
    until [ $(ps axg | grep -vw grep | grep -w ${ANODE_PATH} | wc -l) -eq 0 ] || [ ${timeout_counter} -eq ${ANODE_TIMEOUT_SEC} ]; do
       sleep 1 && ((timeout_counter++))
    done
    if [ ${kill_success} -eq 0 ] && [ ${timeout_counter} -ne ${ANODE_TIMEOUT_SEC} ]; then
      log_tail_success "anode stopped"
    else
      log_tail_failure "failed to stop anode"
    fi
  else
    log_tail_success "anode not started"
  fi
}

status() {
  log_head "Status anode: "
  if [ -f ${ANODE_LOCK} ]; then
    log_tail_success "anode started"
  else
    log_tail_failure "anode stopped"
  fi
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: $0 {start|stop|status}"
    exit 1
esac

exit 0
